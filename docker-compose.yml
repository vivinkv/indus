services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persistent storage for Postgres data
      - ./db_backup.sql:/docker-entrypoint-initdb.d/db_backup.sql  # Load database backup
      - ./db-backups:/backups  # Mount the db-backups directory into the container
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 10
      timeout: 5s

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: vivin@spiderworks.in
      PGADMIN_DEFAULT_USER: vivin
      PGADMIN_DEFAULT_PASSWORD: scam
      POSTGRES_DB: indus
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - app-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_SSL: ${DATABASE_SSL}
      JWT_SECRET: ${JWT_SECRET}
      API_USERNAME: ${API_USERNAME}
      API_PASSWORD: ${API_PASSWORD}
      STRAPI_URL: ${STRAPI_URL}
      BACKEND_URL: ${BACKEND_URL}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    volumes:
      - ./backend/public/uploads:/app/public/uploads  # Persistent media storage
    ports:
      - "1337:1337"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1337/api/health"]
      interval: 30s      # Increased from 15s to 30s
      timeout: 30s       # Increased from 10s to 30s
      retries: 10        # Keeping 10 retries
      start_period: 300s # Increased from 30s to 300s (5 minutes)

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    environment:
      NEXT_PUBLIC_API_BASE_PATH: "http://backend:1337/api/"
      NEXT_PUBLIC_DOMAIN: "http://localhost:1337"
      NEXT_PUBLIC_RECAPTCHA_SITEKEY: ${NEXT_PUBLIC_RECAPTCHA_SITEKEY}
      NEXT_PUBLIC_RECAPTCHA_SECRETKEY: ${NEXT_PUBLIC_RECAPTCHA_SECRETKEY}
      NEXT_PUBLIC_HOST: "0.0.0.0"  # Add this to listen on all network interfaces
    ports:
      - "3000:3000"
    depends_on:
      - backend
    command: >
      sh -c '
        echo "Starting frontend..."
        npm run build && npm start -- -H 0.0.0.0
      '
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  backup_data:
    driver: local

networks:
  app-network:
    driver: bridge